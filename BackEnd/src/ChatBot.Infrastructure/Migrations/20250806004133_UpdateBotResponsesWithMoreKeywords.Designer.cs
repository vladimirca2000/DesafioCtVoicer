// <auto-generated />
using System;
using ChatBot.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChatBot.Infrastructure.Migrations
{
    [DbContext(typeof(ChatBotDbContext))]
    [Migration("20250806004133_UpdateBotResponsesWithMoreKeywords")]
    partial class UpdateBotResponsesWithMoreKeywords
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatBot.Domain.Entities.BotResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Keywords")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Priority");

                    b.HasIndex("Type");

                    b.ToTable("BotResponses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Content = "Olá! Como posso ajudar você hoje?",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            IsDeleted = false,
                            Priority = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111112"),
                            Content = "Oi! Em que posso ser útil?",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            IsDeleted = false,
                            Priority = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111113"),
                            Content = "Estou aqui para ajudar! O que você gostaria de saber?",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            IsDeleted = false,
                            Priority = 3,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111114"),
                            Content = "Que bom te ver por aqui! Como posso te auxiliar?",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            IsDeleted = false,
                            Priority = 4,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111115"),
                            Content = "Precisa de alguma informação? Estou aqui para isso!",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            IsDeleted = false,
                            Priority = 5,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222221"),
                            Content = "Olá! Seja muito bem-vindo(a)! Como posso te ajudar hoje?",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            IsDeleted = false,
                            Keywords = "oi,olá,hello,hi,bom dia,boa tarde,boa noite,ola",
                            Priority = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Content = "Claro! Estou aqui para ajudar. Você pode me perguntar sobre nossos serviços, horários de funcionamento, ou qualquer dúvida que tiver.",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            IsDeleted = false,
                            Keywords = "ajuda,help,socorro,auxilio,auxiliar,preciso",
                            Priority = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222223"),
                            Content = "Nossa equipe de suporte está sempre disponível! Posso te ajudar com informações gerais ou te direcionar para o setor adequado.",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            IsDeleted = false,
                            Keywords = "suporte,apoio,atendimento,assistencia,assistência",
                            Priority = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222224"),
                            Content = "Você gostaria de saber sobre nossos produtos, serviços, horários ou tem alguma dúvida específica?",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            IsDeleted = false,
                            Keywords = "informação,informações,info,saber,conhecer,duvida,dúvida",
                            Priority = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222225"),
                            Content = "Temos uma variedade de produtos e serviços disponíveis! Gostaria de saber sobre algum em específico?",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            IsDeleted = false,
                            Keywords = "produto,produtos,serviço,serviços,oferta,ofertas,venda,vendas",
                            Priority = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222226"),
                            Content = "Para informações sobre preços e valores, posso te direcionar para nossa equipe comercial. Qual produto ou serviço te interessa?",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            IsDeleted = false,
                            Keywords = "preço,preços,valor,valores,custo,custos,quanto custa,barato,caro",
                            Priority = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222227"),
                            Content = "Nosso horário de atendimento é de segunda a sexta das 8h às 18h, e sábados das 8h às 12h. Posso ajudar com mais alguma coisa?",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            IsDeleted = false,
                            Keywords = "horário,horarios,funcionamento,aberto,fechado,atendimento",
                            Priority = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222228"),
                            Content = "Para entrar em contato conosco, você pode usar este chat, ligar para (11) 1234-5678 ou enviar um email para contato@empresa.com.",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            IsDeleted = false,
                            Keywords = "contato,telefone,email,falar,ligar,whatsapp",
                            Priority = 1,
                            Type = 2
                        });
                });

            modelBuilder.Entity("ChatBot.Domain.Entities.ChatSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EndReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StartedAt");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("ChatSessions", (string)null);
                });

            modelBuilder.Entity("ChatBot.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatSessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFromBot")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatSessionId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("IsFromBot");

                    b.HasIndex("SentAt");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("ChatBot.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email_Unique")
                        .HasFilter("\"IsDeleted\" = false");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Users_IsActive");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Users_IsDeleted");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ChatBot.Domain.Entities.ChatSession", b =>
                {
                    b.HasOne("ChatBot.Domain.Entities.User", "User")
                        .WithMany("ChatSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatBot.Domain.Entities.Message", b =>
                {
                    b.HasOne("ChatBot.Domain.Entities.ChatSession", "ChatSession")
                        .WithMany("Messages")
                        .HasForeignKey("ChatSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatBot.Domain.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ChatSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatBot.Domain.Entities.ChatSession", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ChatBot.Domain.Entities.User", b =>
                {
                    b.Navigation("ChatSessions");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
